---
name: 'Build images To Docker Hub'

on:
  push:
    branches:
      - master

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: latest

      - run: npm install #npm ci # or yarn install
      - run: npm install eslint --global
      #- run: npm install eslint-plugin-only-warn --global
      #- run: npm install eslint-plugin-only-warn@latest --save-dev
      - run: eslint --no-eslintrc --rule 'quote-props:warn' --parser-options=ecmaVersion:11 --parser-options=sourceType:module --quiet --fix --ext .js newindex.js
      #- name: Run ESLint
      #  uses: stefanoeb/eslint-action@1.0.2
      #- name: Action ESLint
      #  uses: sibiraj-s/action-eslint@v2.1.2
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }} # Optional
      #    eslint-args: '--ignore-path=.gitignore --fix'
      #    extensions: 'js,jsx,ts,tsx'
      #    annotations: true

      #- name: Run ESLint
      #  run: eslint newindex. --fix --ext .js,.jsx,.ts,.tsx

      - name: Prepare
        id: prep
        run: |
          #${GITHUB_REPOSITORY#*/}
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/lottsanook
          VERSION=latest
          SHORTREF=${GITHUB_SHA::8}

          # If this is git tag, use the tag name as a docker tag
          #if [[ $GITHUB_REF == refs/tags/* ]]; then
            #VERSION=${GITHUB_REF#refs/tags/v}
          #fi
          #TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"
          TAGS="${DOCKER_IMAGE}:${VERSION}"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/arm/v7
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          
      - name: Dive
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: boyphongsakorn/lottsanook:latest
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
      #- uses: wemake-services/docker-image-size-limit@master
      #  with:  # we lint this image by itself:
      #    image: 'boyphongsakorn/lottsanook:latest'
      #    size: 50MB
